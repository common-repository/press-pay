<?
require_once( STRIPE_BASE_DIR . '/app/model/stripe.api.model.php' );
require_once( STRIPE_BASE_DIR . '/app/controller/controller.php' );
class CheckoutController extends Controller
{
  public $redirect = 'none';
  public $using_discount = false;

  public function __construct(){
    add_action( 'init', array($this, 'update_checkout') );
    $this->stripe_options = get_option( 'stripe_settings' );
    $this->addMixin( new StripeApiModel() );
    $this->addMixin( new DebugModel() );
  }
  /***************************************************************************
   * update_checkout()                                                       *
   *                                                                         *
   * Takes the values entered by the user in the checkout form and creates a *
   * charge from them.                                                       *
   ***************************************************************************/
  public function update_checkout() {
    if (
      isset($_POST['action']) &&
      $_POST['action'] == 'stripe' &&
      wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')
    ){
      $this->debug("update_checkout()");
      $this->get_post_vars();
      $using_discount = $this->atomic_process_discount();

      (isset($_POST['recurring']))?
	      $this->atomic_process_recurring_payment() :
      	$this->atomic_process_one_time_payment();

      // redirect back to our previous page with the added query variable
      wp_redirect($this->redirect);
      exit;
    }
  }
  private function get_post_vars(){
    //pull the amount and product_id from the stripe checkout dialog.
    $this->set_amount( base64_decode( $_POST['amount'] ) );
    $this->set_product_id( $_POST['product_id'] );
    $this->set_description( $_POST['description'] );
    $this->redirect = $_POST['redirect'];

    // retrieve the token generated by stripe.js
    $this->set_stripeToken( $_POST['stripeToken'] );
  }
  /*
   * atomic_process_discount()
   *
   * Determine if there is a valid discount and return the appropriate
   */
  private function atomic_process_discount(){
    $using_discount = false;

    // check for a discount code and make sure it is valid if present
    if(isset($_POST['discount']) && strlen(trim($_POST['discount'])) > 0) {
    	$using_discount = true;
	    // we have a discount code, now check that it is valid
      try {
	      $coupon = Stripe_Coupon::retrieve( trim( $_POST['discount'] ) );
	      // if we got here, the coupon is valid
	    } catch (Exception $e) {
	      // an exception was caught, so the code is invalid
	      wp_die('The coupon code you entered is invalid. Please click back and enter a valid code, or leave it blank for no discount.', 'Error');
	    }
    }
    return $using_discount;
  }
  /*
   * atomic_process_one_time_payment()
   *
   * Charge a one time payment to the customers card.
   */
  private function atomic_process_one_time_payment(){
    $this->debug("atomic_process_one_time_payment()");
    // attempt to charge the customer's card
    try {
  	  if($this->using_discount !== false) {
	      // calculate the discounted price
        $this->set_amount( $this->get_amount()
          - ( $this->get_amount() * ( $coupon->percent_off / 100 ) ));
	    }
	    // Find the Stripe customer or create one
      $this->create_remote_stripe_customer( $this );
      $this->charge_customer( $this );
      $customer = new PressPayCustomer( array(
        'stripe_client_id'         => $this->get_customer_id(),
        'wp_user_id'               => null,
        'email'                    => $_POST['stripeEmail'],
        'billing_name'             => $_POST['stripeBillingName'],
        'billing_address_line_1'   => $_POST['stripeBillingAddressLine1'],
        'billing_address_zip'      => $_POST['stripeBillingAddressZip'],
        'billing_address_city'     => $_POST['stripeBillingAddressCity'],
        'billing_address_state'    => $_POST['stripeBillingAddressState'],
        'billing_address_country'  => $_POST['stripeBillingAddressCountry'],
        'shipping_name'            => $_POST['stripeShippingName'],
        'shipping_address_line_1'  => $_POST['stripeShippingAddressLine1'],
        'shipping_address_zip'     => $_POST['stripeShippingAddressZip'],
        'shipping_address_city'    => $_POST['stripeShippingAddressCity'],
        'shipping_address_state'   => $_POST['stripeShippingAddressState'],
        'shipping_address_country' => $_POST['stripeShippingAddressCountry']
      ));
      $transaction = new PressPayTransaction($customer->id, $this->get_amount(), 'charge');
	    $email = new EmailController();
      $email->send_emails($customer, $transaction, $this->get_product_id(), $this->get_description());
      // redirect on successful payment
	    $this->redirect = add_query_arg(
		    array(
			    'payment' => 'paid',
			    'customer_id' => $this->get_customer_id(),
			    'product_id' => $this->get_product_id(),
			    'description'	=> $this->get_description()
		    ), $_POST['redirect']
      );
    }
    catch (Exception $e) {
	    wp_die($e);
	    // redirect on failed payment
	    $this->redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
    }
  }
  /*
   * atomic_process_recurring_payment()
   */
  private function atomic_process_recurring_payment(){
    if(isset($_POST['recurring']) && $_POST['recurring'] == 'yes') {
  	// process a recurring payment
	  $plan_id = strip_tags(trim($_POST['plan_id']));

    try {
  	  /*
   	   * TODO: Clean up and use atomic_get_stripe_customer()
  	   */

  	  if( is_user_logged_in() )
  		$customer_id = get_user_meta( get_current_user_id(), '_stripe_customer_id', true );
  	  else
  		$customer_id = false;

  	  if( $customer_id ) {

  		// retrieve our customer from Stripe
  		$cu = Stripe_Customer::retrieve( $customer_id );

	  	// update the customer's card info (in case it has changed )
		  $cu->card = $this->token;

		  // update a customer's subscription
		  $cu->updateSubscription(
		    array(
			  'plan' => $plan_id
		    ));

		  // save everything
		  $cu->save();

	    }
	    else {

  		// create a brand new customer
  		$customer = Stripe_Customer::create(
  		  array(
  			'card' => $this->token,
  			'plan' => $plan_id,
  			'email' => strip_tags(trim($_POST['email'])),
  			'coupon' => $using_discount ? trim($_POST['discount']) : null
  		  ));

  		if( is_user_logged_in () ) {
	  	  // store the new customer ID in the meta table
		    update_user_meta( get_current_user_id(), '_stripe_customer_id', $customer->id );
  		}

  		$customer_id = $customer->id;
  	  }

  	  if( isset( $this->stripe_options['one_time_fee'] ) ) {

  		$amount = $this->stripe_options['fee_amount'] * 100;

  		$invoice_item = Stripe_InvoiceItem::create( array(
  		  'customer'    => $customer_id, // the customer to apply the fee to
  		  'amount'      => $amount, // amount in cents
  		  'currency'    => 'usd',
  		  'description' => 'One-time setup fee' // our fee description
  		) );

  		$invoice = Stripe_Invoice::create( array(
  		  'customer'    => $customer_id, // the customer to apply the fee to
  		) );

  		$invoice->pay();

  	  }

  	  // redirect on successful recurring payment setup
  	  $this->redirect = add_query_arg('payment', 'paid', $_POST['redirect']);

  	}
  	catch (Exception $e) {
  	  // redirect on failure
  	  wp_die( $e, 'Error' );
  	  $this->redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
  	}
    }
  }
  private function get_stripe_plans() {
  	authenticate_stipe();

	  // retrieve all plans from stripe
	  $plans_data = Stripe_Plan::all();
	  // setup a blank array
	  $plans = array();
	  if($plans_data) {
		  foreach($plans_data['data'] as $plan) {
			  // store the plan ID as the array key and the plan name as the value
			  $plans[$plan['id']] = $plan['name'];
		  }
	  }
	  return $plans;
  }

}

$checkout = new CheckoutController;
?>
